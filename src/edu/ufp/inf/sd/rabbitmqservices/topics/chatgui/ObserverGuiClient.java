package edu.ufp.inf.sd.rabbitmqservices.topics.chatgui;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ObserverGuiClient extends JFrame {


    private Observer observer;

    /**
     * Creates new form ChatClientFrame
     *
     * @param args main args with ip, port and service name
     **/

    public ObserverGuiClient(String args[]) {
        //1. Init the GUI components
        initComponents();
        //3. Create observer (which attaches himself to subject)
        initObserver(args);
    }

    private void initObserver(String args[]) {
        try {
            String username = this.jTextFieldUsername.getText();
            //observer = new ObserverImpl(username, this, args);
            observer = new Observer(this, "localhost", "guest", "guest");
            //this.subjectRI.attach(observer);
        } catch (Exception e) {
            Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, e);
        }
    }


    protected void updateTextArea() {
        String msg = "[" + this.observer.getMessage() + "] ";
        this.jTextAreaChatHistory.append(msg + '\n');
    }

    /**
     * This method is called from within the constructor to initialize form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new JFileChooser();
        jScrollPane1 = new JScrollPane();
        jTextAreaChatHistory = new JTextArea();
        jButtonSend = new JButton();
        jTextFieldMsg = new JTextField();
        jLabelUserID = new JLabel();
        jTextFieldUsername = new JTextField();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        jMenuItemExit = new JMenuItem();
        jMenuItemSave = new JMenuItem();
        jMenu2 = new JMenu();
        jMenuItemCopy = new JMenuItem();
        jMenuItemPaste = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jTextAreaChatHistory.setColumns(20);
        jTextAreaChatHistory.setLineWrap(true);
        jTextAreaChatHistory.setRows(5);
        jTextAreaChatHistory.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaChatHistory);

        jButtonSend.setText("Send");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jTextFieldMsg.setText("msg");
        jTextFieldMsg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMsgKeyPressed(evt);
            }
        });

        jLabelUserID.setText("User ID");

        jTextFieldUsername.setText("rmoreira");

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSave);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCopy);

        jMenuItemPaste.setText("Paste");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemPaste);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabelUserID)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextFieldUsername, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                                        .addComponent(jTextFieldMsg, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSend))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 246, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextFieldMsg, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonSend))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabelUserID)
                                        .addComponent(jTextFieldUsername, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        // TODO add your handling code here:
        this.jTextAreaChatHistory.selectAll();
        this.jTextAreaChatHistory.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        // TODO add your handling code here:
        this.jTextAreaChatHistory.paste();
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        // TODO add your handling code here:
        //    this.jTextArea1.append(this.jTextField1.getText() + "\n");
        //    this.jTextField1.setText("");
        try {
            this.observer.sendMenssage(this.jTextFieldMsg.getText(), "", null);
        } catch (RemoteException ex) {
            Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jTextFieldMsgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMsgKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c == '\n' || c == '\r') {
            //this.jTextArea1.append(this.jTextField1.getText() + "\n");
            //this.jTextField1.setText("");
            try {
                this.observer.sendMenssage(this.jTextFieldMsg.getText(), "", null);
            } catch (RemoteException ex) {
                Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jTextFieldMsgKeyPressed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        // TODO add your handling code here:
        FileWriter fw = null;
        try {
            this.jFileChooser1 = new JFileChooser(new File("C:\\Temp"));
            this.jFileChooser1.showSaveDialog(this);
            File f = this.jFileChooser1.getSelectedFile();
            if (f != null) {
                fw = new FileWriter(f);
                PrintWriter pw = new PrintWriter(fw);
                pw.println(this.jTextAreaChatHistory.getText());
            }
        } catch (IOException ex) {
            Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(ObserverGuiClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (args.length >= 0) {
                    new ObserverGuiClient(args).setVisible(true);
                } else {
                    System.out.println(ObserverGuiClient.class + ": call must have the following args: <rmi_ip> <rmi_port> <rmi_service_prefix>");
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButtonSend;
    private JFileChooser jFileChooser1;
    private JLabel jLabelUserID;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenuBar jMenuBar1;
    private JMenuItem jMenuItemCopy;
    private JMenuItem jMenuItemExit;
    private JMenuItem jMenuItemPaste;
    private JMenuItem jMenuItemSave;
    private JScrollPane jScrollPane1;
    private JTextArea jTextAreaChatHistory;
    private JTextField jTextFieldMsg;
    private JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
}
